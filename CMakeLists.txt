#Generated by VisualGDB project wizard.
#Note: VisualGDB will automatically update this file when you add new sources to the project.

cmake_minimum_required(VERSION 2.7)
project(duo_ros)

find_package(CUDA REQUIRED)
find_package(OpenCV 2.4 COMPONENTS core highgui imgproc REQUIRED)
find_package(PCL REQUIRED)

find_package(catkin REQUIRED COMPONENTS
  cv_bridge
  dynamic_reconfigure
  image_transport
  rosconsole
  roscpp
  sensor_msgs
  camera_info_manager
  camera_calibration_parsers
)

generate_dynamic_reconfigure_options(
  cfg/Duo.cfg
)

catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES duo_ros
  CATKIN_DEPENDS camera_calibration_parsers camera_info_manager cv_bridge dynamic_reconfigure image_transport opencv2 rosconsole roscpp sensor_msgs 
#  DEPENDS system_lib
)

 #for now hardcode in DUOSDK
include_directories(
  ${catkin_INCLUDE_DIRS}
  ${OpenCV_INCLUDE_DIRS}
  ${PCL_INCLUDE_DIRS}
  ${CUDA_INCLUDE_DIRS}
  /home/ubuntu/CL-DUO3D-ARM-1.0.50.26/DUOSDK/SDK/include
)

link_directories(${CUDA_LIBRARY_DIRS})
link_directories(${OpenCV_LIBRARY_DIRS})
link_directories(${PCL_LIBRARY_DIRS})
link_directories(/home/ubuntu/CL-DUO3D-ARM-1.0.50.26/DUOSDK/SDK/linux/arm)

set(LIBRARIES_FROM_REFERENCES "")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -std=gnu++11")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -std=gnu++11")

add_executable(duo_ros src/DUOInterface.cpp src/duo_ros.cpp)

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(duo_ros ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(duo_ros ${PROJECT_NAME}_gencfg)

## Specify libraries to link a library or executable target against
# target_link_libraries(duo_ros_node
#   ${catkin_LIBRARIES}
# )
target_link_libraries(duo_ros DUO ${catkin_LIBRARIES} ${CUDA_LIBRARIES} ${CUDA_nppi_LIBRARY} ${CUDA_npps_LIBRARY} ${OpenCV_LIBS} ${PCL_LIBRARIES} "${LIBRARIES_FROM_REFERENCES}")
